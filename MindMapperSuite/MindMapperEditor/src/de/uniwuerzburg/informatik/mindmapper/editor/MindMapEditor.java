package de.uniwuerzburg.informatik.mindmapper.editor;

import de.uniwuerzburg.informatik.mindmapper.editorapi.DocumentCookie;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Enumeration;
import javax.swing.ActionMap;
import javax.swing.text.DefaultEditorKit;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.UndoRedo;
import org.openide.cookies.CloseCookie;
import org.openide.cookies.SaveCookie;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.loaders.MultiDataObject;
import org.openide.nodes.Node;
import org.openide.util.Lookup;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.CloneableTopComponent;

/**
 * An editor for MindMaps using BeanTreeView as the viewer.
 * @author Christian "blair" Schwartz
 */
public class MindMapEditor extends CloneableTopComponent implements ExplorerManager.Provider{

    /**
     * The shared UndoRedo.Manager of the document.
     */
    protected UndoRedo.Manager undoRedoManager;

    /**
     * The explorermanager used by the BeanTreeView to display the nodes
     * representing the MindMap.
     */
    protected ExplorerManager explorerManager;

    /**
     * The Node describing the MindMap Document.
     */
    protected Node documentNode;

    /**
     * The DataObject containing the MindMap Document.
     */
    protected MultiDataObject dataObject;

    /**
     * Creates a new MindMap Editor without a document. Call
     * initFrom(dataObject) to complete initialization.
     * Used by the externalize system to restore closed editors.
     */
    public MindMapEditor() {
        initComponents();
        explorerManager = new ExplorerManager();
        ActionMap map = getActionMap();

        map.put(DefaultEditorKit.copyAction, ExplorerUtils.actionCopy(explorerManager));
        map.put(DefaultEditorKit.cutAction, ExplorerUtils.actionCut(explorerManager));
        map.put(DefaultEditorKit.pasteAction, ExplorerUtils.actionPaste(explorerManager));
        map.put("delete", ExplorerUtils.actionDelete(explorerManager, true));
    }

    /**
     * Creates new form MindMapEditor displaying the MindMap contained in the
     * dataObject.
     * @param dataObject A dataObject containing a DocumentNodeCookie.
     */
    public MindMapEditor(MultiDataObject dataObject) {
        this();
        this.dataObject = dataObject;
        initFrom(dataObject);
    }

    @Override
    protected CloneableTopComponent createClonedObject() {
        MindMapEditor tc = new MindMapEditor(dataObject);
        return tc;
    }

    /**
     * Init this editor from the given dataObject.
     * @param dataObject The dataObject to init from.
     */
    protected void initFrom(MultiDataObject dataObject) {
        documentNode = dataObject.getLookup().lookup(DocumentCookie.class).getDocumentNode();

        explorerManager.setRootContext(documentNode);

        associateLookup(new ProxyLookup(new Lookup[] {ExplorerUtils.createLookup(explorerManager, getActionMap())}));
        undoRedoManager = dataObject.getLookup().lookup(DocumentCookie.class).getUndoRedoManager();

        setDisplayName(documentNode.getName());
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    @Override
    public UndoRedo getUndoRedo() {
        return undoRedoManager;
    }

    @Override
    public int getPersistenceType() {
        return PERSISTENCE_ONLY_OPENED;
    }

    @Override
    protected String preferredID() {
        return "MindMapEditor";
    }

    @Override
    public void writeExternal(ObjectOutput arg0) throws IOException {
        super.writeExternal(arg0);

        arg0.writeObject(dataObject);
    }

    @Override
    public void readExternal(ObjectInput arg0) throws IOException, ClassNotFoundException {
        super.readExternal(arg0);

        dataObject = (MultiDataObject)arg0.readObject();
        dataObject.getCookie(DocumentCookie.class).getDocumentNode();
        initFrom(dataObject);
    }

    /**
     * Check if the editor can be closed or if changes have to be saved.
     * @return True, if the editor should be closed, False if else.
     */
    @Override
    public boolean canClose() {
        boolean isModified = dataObject.getCookie(DocumentCookie.class).isModified();
        Enumeration<CloneableTopComponent> components = getReference().getComponents();
        int numComponents = 0;
        while(components.hasMoreElements()) {
            components.nextElement();
            numComponents++;
        }

        //If more than one cloned version of the editor exists, the editor
        //can be closed.
        //If the document is not modified it can be closed.
        if(numComponents > 1 || !isModified)
            return true;
        else {
            NotifyDescriptor unsavedChangedDialog = new NotifyDescriptor.Confirmation(
                    "Do you want to save before quitting",
                    "Unsaved changes");
            Object returnValue = DialogDisplayer.getDefault().notify(unsavedChangedDialog);

            if(returnValue == NotifyDescriptor.YES_OPTION) {
                //save the document and quit.
                try {
                documentNode.getCookie(SaveCookie.class).save();
                dataObject.getCookie(CloseCookie.class).close();
                return true;
                } catch(IOException e) {
                    NotifyDescriptor n = new NotifyDescriptor.Exception(e);
                    DialogDisplayer.getDefault().notify(n);
                    dataObject.getCookie(CloseCookie.class).close();
                    return false;
                }
            } else if(returnValue.equals(NotifyDescriptor.NO_OPTION)) {
                //don't save the document and quit.
                dataObject.getCookie(CloseCookie.class).close();
                return true;
            } else {
                //cancel the closing.
                return false;
            }

        }
    }


}
